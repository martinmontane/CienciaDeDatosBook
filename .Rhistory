ggplot(dfBar %>% filter(date>"2020-04-01"), aes(fill=continente, y=shareContinente, x=date)) +
geom_col(position="stack") +
geom_text(aes(label=round(shareContinente*100)),position = position_stack(vjust=0.5)) +
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_date(breaks = "week") +
theme(axis.text.x = element_text(angle=90))
ggplot(dfBar %>% filter(date>"2020-04-01"), aes(fill=continente, y=shareContinente, x=date)) +
geom_col(position="stack") +
geom_text(aes(label=round(shareContinente*100)),position = position_stack(vjust=0.5)) +
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_date(date_breaks = "week") +
theme(axis.text.x = element_text(angle=90))
seq("2020-04-01","2020-05-10","weeks")
seq("2020-04-01","2020-05-10",7)
seq("2020-04-01","2020-05-10",by=7)
seq(as.Date("2020-04-01"),as.Date("2020-05-10"),by=7)
ggplot(dfBar %>% filter(date>"2020-04-01"), aes(fill=continente, y=shareContinente, x=date)) +
geom_col(position="stack") +
geom_text(aes(label=round(shareContinente*100)),position = position_stack(vjust=0.5)) +
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_date(breaks = seq(as.Date("2020-04-01"),as.Date("2020-05-10"),by=7)) +
theme(axis.text.x = element_text(angle=90))
ggplot(dfBar %>% filter(date>"2020-04-01"), aes(fill=continente, y=shareContinente, x=date)) +
geom_col(position="stack") +
geom_text(aes(label=round(shareContinente*100)),position = position_stack(vjust=0.5)) +
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_date(breaks = seq(as.Date("2020-04-01"),as.Date("2020-05-10"),by=4)) +
theme(axis.text.x = element_text(angle=90))
ggplot(dfBar %>% filter(date>"2020-04-01"), aes(fill=continente, y=shareContinente, x=date)) +
geom_col(position="stack") +
geom_text(aes(label=round(shareContinente*100)),position = position_stack(vjust=0.5)) +
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format()) +
scale_x_date(breaks = seq(as.Date("2020-04-01"),as.Date("2020-05-10"),by=3)) +
theme(axis.text.x = element_text(angle=90))
install.packages("extrafont")
require(extrafont)
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(familiy="calibri"))
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="calibri"))
# Nos quedamos con los datos correspondiente a algunos países de América Latina
dfBar <- infoCovid %>%
group_by(location) %>%
filter(any(total_deaths>10)) %>%
filter(location %in% c("Argentina","Brazil","Chile","Bolivia","Paraguay","Colombia","Ecuador","Uruguay")) %>%
mutate(deathsPerMillion=(total_deaths/population)*1000000)
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="calibri"))
extrafont::choose_font()
extrafont::fonts()
extrafont::font_import()
# Extrafont nos ayuda a cargar las fuente a R
require(extrafont)
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="calibri"))
extrafont::fonts()
font_import(pattern="Calibri")
Y
font_import(pattern="calibri")
font_import()
font_import()
font_import(pattern="calibri")
extrafont::font_import()
extrafont::fonts()
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Times New Roman"))
# Extrafont nos ayuda a cargar las fuentes que tengamos en nuestra computadora
require(extrafont)
# Deben importar las fuentes a R. SOLO HAY QUE HACERLO UNA VEZ. puede llevar varios minutos
# font_import()
# con fonts() pueden ver las fuentes que pueden usar en el ggplot
require(tidyverse)
# Deben importar las fuentes a R. SOLO HAY QUE HACERLO UNA VEZ. puede llevar varios minutos
# font_import()
# con fonts() pueden ver las fuentes que pueden usar en el ggplot
require(tidyverse)
require(ggthemes)
# Nos quedamos con los datos correspondiente a algunos países de América Latina
dfBar <- infoCovid %>%
group_by(location) %>%
filter(any(total_deaths>10)) %>%
filter(location %in% c("Argentina","Brazil","Chile","Bolivia","Paraguay","Colombia","Ecuador","Uruguay")) %>%
mutate(deathsPerMillion=(total_deaths/population)*1000000)
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Times New Roman"))
fonts()
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Verdana"))
# Extrafont nos ayuda a cargar las fuentes que tengamos en nuestra computadora
require(extrafont)
# Deben importar las fuentes a R. SOLO HAY QUE HACERLO UNA VEZ. puede llevar varios minutos
# font_import()
# con fonts() pueden ver las fuentes que pueden usar en el ggplot
require(tidyverse)
require(ggthemes)
# Nos quedamos con los datos correspondiente a algunos países de América Latina
dfBar <- infoCovid %>%
group_by(location) %>%
filter(any(total_deaths>10)) %>%
filter(location %in% c("Argentina","Brazil","Chile","Bolivia","Paraguay","Colombia","Ecuador","Uruguay")) %>%
mutate(deathsPerMillion=(total_deaths/population)*1000000)
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Verdana"))
fonts()
# Código para el gráfico de lineas con scale cambiado
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Trebuchet MS"))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Trebuchet MS"))
font_import("Montserrat")
font_import()
fonts()
fonts("Verdana")
fonttable()
View(fonttable())
fonts()
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Webdings"))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Impacts"))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Impact"))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Arial"))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10))
ggplot(dfBar) +
geom_line(aes(x=date,y=deathsPerMillion,group=location,color=location)) +
labs(x="",y="Muertos por COVID por millones de habitantes",caption = "Elaboración propia con base en datos de Our World In Data") +
scale_color_brewer(palette = "Set2") +
scale_y_continuous(limits = c(0,10)) +
theme(text=element_text(family="Verdana"))
install.packages("treempaify")
install.packages("treemapify")
library(countrycode)
library(treemapify)
library(tidyverse)
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente)) %>%
group_by(date,continente) %>%
summarise(total_deaths=sum(total_deaths))
dfBar
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente))
dfBar
infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente))
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente)) %>%
group_by(continente,location) %>%
summarise(total_deaths=sum(total_deaths))
dfBar
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente)) %>%
group_by(location) %>%
summarise(total_deaths=sum(total_deaths))
dfBar
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente)) %>%
group_by(location) %>%
summarise(total_deaths=sum(total_deaths))
dfBar
infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent"))
View(infoCovid)
dfBar <- infoCovid %>%
mutate(continente=countrycode(sourcevar = location,origin = "country.name",destination = "continent")) %>%
filter(!is.na(continente)) %>%
group_by(continente,location) %>%
summarise(total_deaths=sum(new_deaths))
dfBar
ggplot(dfBar) +
geom_treemap(area=total_deaths,fill=cotinente)
ggplot(dfBar) +
geom_treemap(aes(area=total_deaths,fill=cotinente))
ggplot(dfBar) +
geom_treemap(aes(area=total_deaths,fill=continente))
ggplot(dfBar) +
geom_treemap(aes(area=total_deaths,fill=continente,subgroup=continente))
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=location)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=continente)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=location)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=location)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=location)) +
geom_treemap() +
geom_treemap_subgroup_text() +
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente)) +
geom_treemap() +
geom_treemap_subgroup_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente)) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=location)) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")"))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj()
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj() +
guides(fill=FALSE)
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj() +
guides(fill=FALSE)
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj() +
guides(fill=FALSE) +
labs(title="Total de muertes por pais y continente",
subtitle="Datos hasta el 10 de mayo de 2020",
caption="Elaboracion propia en base a datos de Our World In Data")
ggplot(dfBar,aes(area=total_deaths,fill=continente,subgroup=continente,label=paste(location,"(",total_deaths,")",sep=""))) +
geom_treemap() +
geom_treemap_subgroup_text() +
geom_treemap_text() +
scale_fill_wsj() +
guides(fill=FALSE) +
labs(title="Total de muertes por pais y continente",
subtitle="Datos hasta el 10 de mayo de 2020",
caption="Elaboracion propia en base a datos de Our World In Data")
bookdown::preview_chapter("visualizaciones.Rmd",output_format="html_book")
bookdown::preview_chapter("visualizaciones.Rmd")
render_book("_bookdown.yml")
bookdown::render_book("_bookdown.yml")
installed.packages("formatR")
install.packages("formatR")
bookdown::render_book("_bookdown.yml")
install.packages("tmap")
bookdown::render_book("_bookdown.yml")
install.packages("areal")
bookdown::render_book("_bookdown.yml")
install.packages("C50")
bookdown::render_book("_bookdown.yml")
bookdown::preview_chapter("MachineLearning.Rmd")
−0.59*log2(0.59)−(0.41)*log2(0.41)
-0.59*log2(0.59)−(0.41)*log2(0.41)
-0.59*log2(0.59)-(0.41)*log2(0.41)
-0.5*log2(0.5)-(0.5)*log2(0.5) # Máxima entropía
-0.000001*log2(0.000001)-(1)*log2(1) # Casi cero
bookdown::preview_chapter("MachineLearning.Rmd")
titanic <- read.csv(file = "https://raw.githubusercontent.com/martintinch0/CienciaDeDatosParaCuriosos/master/data/titanic.csv",
stringsAsFactors = FALSE,
sep = ';')
primerArbol <- C5.0(formula= survived ~.,
data = titanic)
titanic <- titanic %>%
mutate(survived = factor(survived),
sex = factor(sex))
primerArbol <- C5.0(formula= survived ~.,
data = titanic)
plot(primerArbol)
proporcionSobrevivientes <- table(titanic$survived)[2]/nrow(titanic)
proporcionSobrevivientes # Aproximadamente un 41% de los pasajeros sobrevivieron
# Formula de Entropía
-0.59*log2(0.59)-(0.41)*log2(0.41)
proporcionSobrevivientes <- table(titanic$survived)[2]/nrow(titanic)
proporcionSobrevivientes # Aproximadamente un 41% de los pasajeros sobrevivieron
# Formula de Entropía
-0.59*log2(0.59)-(0.41)*log2(0.41)
bookdown::preview_chapter("MachineLearning.Rmd")
install.packages("rpartplot")
install.packages("rpart.plot")
bookdown::render_book("_bookdown.yml")
bookdown::preview_chapter("Anexo2.Rmd")
bookdown::preview_chapter("datasets.Rmd")
bookdown::preview_chapter("caret.Rmd")
bookdown::preview_chapter("MachineLearning.Rmd")
require(rpart)
require(rpart.plot)
avisosInmuebles <- avisosInmuebles %>%
mutate(USDm2=price/surface_total)
arbolRegresion <- rpart(formula = USDm2 ~ rooms + BARRIO + bathrooms + property_type,
data = avisosInmuebles,control = rpart.control(cp = 0.01))
rpart.plot(arbolRegresion)
bookdown::render_book("_bookdown.yml")
library(tidyverse)
library(C50)
## --------------------------------------------------------------------------------------------------------------
titanic <- read.csv(file = "https://raw.githubusercontent.com/martintinch0/CienciaDeDatosParaCuriosos/master/data/titanic.csv",
stringsAsFactors = FALSE,
sep = ';')
## --------------------------------------------------------------------------------------------------------------
require(rpart)
require(rpart.plot)
avisosInmuebles <- avisosInmuebles %>%
mutate(USDm2=price/surface_total)
## --------------------------------------------------------------------------------------------------------------
avisosInmuebles <-read.table(file = url("https://github.com/martintinch0/CienciaDeDatosParaCuriosos/raw/master/data/datosProperati.csv"),
sep=';',header = TRUE,stringsAsFactors = FALSE)
## --------------------------------------------------------------------------------------------------------------
glimpse(avisosInmuebles)
## --------------------------------------------------------------------------------------------------------------
avisosInmuebles <- avisosInmuebles %>%
filter(property_type %in% c("Casa","Departamento","PH"))
## --------------------------------------------------------------------------------------------------------------
sum(is.na(avisosInmuebles$rooms))
sum(is.na(avisosInmuebles$bathrooms))
sum(is.na(avisosInmuebles$surface_covered))
## --------------------------------------------------------------------------------------------------------------
avisosInmuebles <- avisosInmuebles %>%
mutate(ambientes=str_extract(pattern = "(?i)\\d.amb", string= title)) %>%
mutate(ambientes=ifelse(is.na(ambientes),
str_extract(pattern = "(?i)\\d.amb", string=description), ambientes)) %>%
mutate(ambientes=as.numeric(str_extract(pattern='\\d',ambientes))) %>%
mutate(ambientes=ifelse(ambientes == 0,NA,ambientes))
## --------------------------------------------------------------------------------------------------------------
table(avisosInmuebles$ambientes==avisosInmuebles$rooms)
## --------------------------------------------------------------------------------------------------------------
avisosInmuebles <- avisosInmuebles %>%
mutate(rooms = ifelse(is.na(rooms), ambientes, rooms))
sum(is.na(avisosInmuebles$rooms))
## --------------------------------------------------------------------------------------------------------------
avisosInmuebles <- avisosInmuebles %>%
select(-created_on,-currency,-title,-description,-operation_type,-ambientes) %>%
filter(complete.cases(.))
## --------------------------------------------------------------------------------------------------------------
require(rpart)
require(rpart.plot)
avisosInmuebles <- avisosInmuebles %>%
mutate(USDm2=price/surface_total)
arbolRegresion <- rpart(formula = USDm2 ~ rooms + BARRIO + bathrooms + property_type,
data = avisosInmuebles,control = rpart.control(cp = 0.01))
arbolRegresion
rpart.plot(arbolRegresion)
Sys.setlocale('LC_ALL','C')
rpart.plot(arbolRegresion)
bookdown::preview_chapter("MachineLearning.Rmd")
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
```{r, echo=FALSE,results="hide"}
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
quiet(Sys.setlocale('LC_ALL','C'))
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
quiet(Sys.setlocale('LC_ALL','C'))
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
quiet(Sys.setlocale('LC_ALL','C'))
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
Sys.setlocale('LC_ALL','C')
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
```{r, echo=FALSE,results=FALSE,message=FALSE}
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
# Este chunk solo esta para evitar un error que tiene rpart.plot en ubuntu y algunos de los nombres de las variables
try(Sys.setlocale('LC_ALL','C'),silent = TRUE,outFile = FALSE)
bookdown::preview_chapter("MachineLearning.Rmd")
warnings()
